#!/bin/sh

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local sha1> <remote ref> <remote sha1>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).
#!/bin/sh

# To use add to `.git/hooks/`
# Should be named `pre-push`
# Make executable with `chmod +x`

export PATH=/usr/local/bin:$PATH
export PATH=$HOME/flutter/bin:$PATH

# get stash count
ORIGINAL_STASH_COUNT=$(git rev-list --walk-reflogs --count refs/stash 2> /dev/null)

if [ $? -ne 0 ]; then
	ORIGINAL_STASH_COUNT=0
fi

# stash any unstaged changes
git stash -q --keep-index --include-untracked

# get stash count
NEW_STASH_COUNT=$(git rev-list --walk-reflogs --count refs/stash 2> /dev/null)

if [ $? -ne 0 ]; then
	NEW_STASH_COUNT=0
fi

echo "Stash count - ${ORIGINAL_STASH_COUNT} vs ${NEW_STASH_COUNT}"

# pop stash controll - 0 is true in shell script practice
SHOULD_STASH_POP=0

if [ $ORIGINAL_STASH_COUNT -eq $NEW_STASH_COUNT ]; then
	echo 'Stash count is same'

	SHOULD_STASH_POP=1
fi

# run Flutter analyze ignore info and warning level issue
ANALYZE_OUTPUT=$(flutter analyze --no-fatal-infos --no-fatal-warnings)

if [ $? -ne 0 ]; then
	echo "${ANALYZE_OUTPUT}" | grep 'error â€¢.*$' --color
	echo 'Analyze Failed'

	# unstash the unstashed changes
	git stash pop -q
	exit 1
fi

# flutter test

# if [ $? -ne 0 ]; then
# 	# unstash the unstashed changes
# 	git stash pop -q
# 	exit 1
# fi


# unstash the unstashed changes
if [ $SHOULD_STASH_POP -eq 0 ]; then
	echo 'Stash Pop'

	git stash pop -q
fi

exit 0